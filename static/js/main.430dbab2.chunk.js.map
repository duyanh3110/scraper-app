{"version":3,"sources":["actions/datadog.js","components/Incident.js","components/Datadog.js","actions/types.js","components/Status.js","components/Azure.js","actions/azure.js","reducers/datadogReducer.js","reducers/azureReducer.js","reducers/errorReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["cheerio","require","Incident","incidents","this","props","datadogs","data","Object","keys","map","item","className","key","href","url","title","date","dangerouslySetInnerHTML","__html","containers","Component","connect","state","datadog","DataDog","setDataDog","dispatch","getData","axios","get","then","response","html","$","load","incidentElems","incidentArr","each","index","incident","find","text","trim","attr","substr","first","push","type","payload","catch","error","setInterval","Status","azureStatus","azure","zone","name","virtual","cloud","azureFunc","Azure","setAzureData","initialState","azureError","datadogError","combineReducers","action","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.430dbab2.chunk.js","sourcesContent":["import { SET_DATADOG, GET_DATADOG_ERROR } from \"./types\";\nimport axios from \"axios\";\n\nconst cheerio = require(\"cheerio\");\n\nexport const setDataDog = () => dispatch => {\n  const getData = () => {\n    axios\n      .get(\"https://status.datadoghq.com/\")\n      .then(response => {\n        const html = response.data;\n        const $ = cheerio.load(html);\n        const incidentElems = $(\".status-day:not(.no-incidents)\");\n        let incidentArr = [];\n\n        incidentElems.each(function(index) {\n          if (index > 4) {\n            return false;\n          } else {\n            const title = $(this)\n              .find(\".incident-title\")\n              .text()\n              .trim();\n            const url =\n              \"https://status.datadoghq.com/\" +\n              $(this)\n                .find(\".incident-title a\")\n                .attr(\"href\")\n                .substr(1);\n            const date = $(this)\n              .find(\".date\")\n              .first()\n              .text();\n            const containers = $(this)\n              .find(\".updates-container\")\n              .html();\n            let incident = {\n              title: title,\n              url: url,\n              date: date,\n              containers: containers\n            };\n            incidentArr.push(incident);\n          }\n        });\n        dispatch({\n          type: SET_DATADOG,\n          payload: incidentArr\n        });\n      })\n      .catch(function(error) {\n        dispatch({\n          type: GET_DATADOG_ERROR,\n          payload: error\n        });\n      });\n  };\n  getData();\n  setInterval(getData, 600000);\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass Incident extends Component {\n  render() {\n    const incidents = this.props.datadogs.data;\n    return (\n      <div>\n        {Object.keys(incidents).map(item => (\n          <div className=\"incident\" key={item}>\n            <div className=\"incident--title\">\n              <a className=\"incident--link\" href={incidents[item].url}>\n                {incidents[item].title}\n              </a>\n              <div className=\"incident--date\">{incidents[item].date}</div>\n            </div>\n            <div\n              className=\"incident--containers\"\n              dangerouslySetInnerHTML={{ __html: incidents[item].containers }}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nconst mapStatetoProps = state => ({\n  datadogs: state.datadog\n});\n\nexport default connect(mapStatetoProps)(Incident);\n","import React, { Component } from \"react\";\nimport { setDataDog } from \"../actions/datadog\";\nimport { connect } from \"react-redux\";\n\nimport Incident from \"./Incident\";\n\nclass DataDog extends Component {\n  componentDidMount() {\n    this.props.setDataDog();\n  }\n  \n  render() {\n    return (\n      <div>\n        <div className=\"title\">Datadog Status</div>\n        <Incident />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { setDataDog }\n)(DataDog);\n","export const SET_DATADOG = 'SET_DATADOG';\nexport const SET_AZURE = 'SET_AZURE';\nexport const GET_DATADOG_ERROR = 'GET_DATADOG_ERROR';\nexport const GET_AZURE_ERROR = 'GET_AZURE_ERROR';\nexport const CLEAR_AZURE_ERROR = 'CLEAR_AZURE_ERROR';\nexport const CLEAR_DATADOG_ERROR = 'CLEAR_DATADOG_ERROR';","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass Status extends Component {\n  render() {\n    const azureStatus = this.props.azure.data.data;\n    return (\n      <div className=\"status\">\n        {azureStatus ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Zone</th>\n                <th>Region</th>\n                <th>Virtual Machines</th>\n                <th>Cloud Services</th>\n                <th>Azure Functions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.keys(azureStatus).map(item => (\n                <tr key={item}>\n                  <td>{azureStatus[item].zone}</td>\n                  <td>{azureStatus[item].name}</td>\n                  <td>{azureStatus[item].virtual}</td>\n                  <td>{azureStatus[item].cloud}</td>\n                  <td>{azureStatus[item].azureFunc}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        ) : (\n          \"Loading\"\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStatetoProps = state => ({\n  azure: state.azure\n});\n\nexport default connect(mapStatetoProps)(Status);\n","import React, { Component } from \"react\";\nimport { setAzureData } from \"../actions/azure\";\nimport { connect } from \"react-redux\";\nimport Status from './Status';\n\nclass Azure extends Component {\n  componentDidMount() {\n    this.props.setAzureData();\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"title\">Azure Status</div>\n        <Status />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { setAzureData }\n)(Azure);\n","import { SET_AZURE, GET_AZURE_ERROR } from \"./types\";\nimport axios from \"axios\";\n\nexport const setAzureData = () => dispatch => {\n  const getData = () => {\n    axios\n      .get(\n        \"https://us-central1-azure-data-258522.cloudfunctions.net/function-1\"\n      )\n      .then(response => {\n        dispatch({\n          type: SET_AZURE,\n          payload: response\n        });\n      })\n      .catch(function(error) {\n        dispatch({\n          type: GET_AZURE_ERROR,\n          payload: error\n        });\n      });\n  };\n  getData();\n  setInterval(getData, 600000);\n};\n","import { SET_DATADOG } from \"../actions/types\";\n\nconst initialState = {\n  data: {}\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case SET_DATADOG:\n      return {\n        ...state,\n        data: payload\n      };\n    default:\n      return state;\n  }\n}\n","import { SET_AZURE } from \"../actions/types\";\n\nconst initialState = {\n  data: {}\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case SET_AZURE:\n      return {\n        ...state,\n        data: payload\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  GET_AZURE_ERROR,\n  GET_DATADOG_ERROR,\n  CLEAR_DATADOG_ERROR,\n  CLEAR_AZURE_ERROR\n} from \"../actions/types\";\n\nconst initialState = {\n  azureError: {},\n  datadogError: {}\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_AZURE_ERROR:\n      return { azureError: payload };\n    case GET_DATADOG_ERROR:\n      return { datadogError: payload };\n    case CLEAR_AZURE_ERROR:\n      return {\n        azureError: {}\n      };\n    case CLEAR_DATADOG_ERROR:\n      return {\n        azureError: {}\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport datadog from \"./datadogReducer\";\nimport azure from \"./azureReducer\";\nimport error from \"./errorReducer\";\n\nexport default combineReducers({\n  datadog,\n  azure,\n  error\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport DataDog from \"./components/Datadog\";\nimport Azure from \"./components/Azure\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div>\n          <Azure />\n          <DataDog />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}